#!/usr/bin/env python

"""
 Copyright (c) 2014 GRNET SA (grnet.gr)

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

     http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
"""

import warnings

warnings.filterwarnings("ignore", category=DeprecationWarning)

from slipstream_okeanos.OkeanosCommand import OkeanosCommand
from slipstream_okeanos import LOG


class MainProgram(OkeanosCommand):
    def __init__(self):
        super(MainProgram, self).__init__()

    def setExtraOptions(self, parser):
        parser.add_option('--image-id', dest='imageId', help='Image ID. Mandatory.', default='', metavar='ID')

        parser.add_option('--instance-name', dest='instance_name', help='Name of the instance', default='',
                          metavar='NAME')

        parser.add_option('--instance-type', dest='instance_type', help='Instance Type (Flavor)', default=None,
                          metavar='TYPE')

        parser.add_option('--network-type', dest='network_type', help='Network type (public or private)',
                          default='public', metavar='NETWORK-TYPE')

        parser.add_option('--public-key', dest='public_key', help='Public key in the OpenSSH format', default='',
                          metavar='PUBKEY')

        parser.add_option('--security-groups', dest='security_groups', help='Comma separated list of security groups',
                          default='', metavar='SECGROUPS')

        parser.add_option('--context-script', dest='context_script', help='Context script', default='',
                          metavar='SCRIPT')

        parser.add_option('--volatile-disk-size', dest='vdisksize', help='Volatile disk size (GB)', default='0',
                          metavar='VDISKSIZE')

        # ID of the project that provides the resources
        parser.add_option('--project-id', dest='project_id', help='ID of the project that provides the resources',
                          default=None,
                          metavar='PROJECTID')

    def checkExtraOptions(self, options, parser):
        if not all((options.imageId, options.instance_type, options.region, options.instance_name)):
            parser.error('Some mandatory options were not given values.')

    def setExtraUserInfo(self, userInfo):
        userInfo['General.ssh.public.key'] = self.options.public_key
        userInfo[self.providerName + '.vdisksize'] = self.options.vdisksize
        userInfo[self.providerName + '.project_id'] = self.options.project_id

    def doWork(self):
        nodeName = self.options.instance_name
        flavorIdOrName = self.options.instance_type
        imageId = self.options.imageId
        sshPubKey = self.options.public_key
        contextScriptData = self.options.context_script
        LOG("vdisksize = '%s'" % self.options.vdisksize)
        vdisksizeGB = int(self.options.vdisksize or 0)
        projectId = self.options.project_id

        # Create the server
        contextScriptPath = "/root/okeanos-contextualizer"  # TODO make it configurable in the SlipStreamServer GUI
        contextScriptPathAndData = (contextScriptPath, contextScriptData)
        nodeDetails, scriptResults = self.okeanosClient.createNodeAndWait(nodeName, flavorIdOrName, imageId, sshPubKey,
                                                                          initScriptPathAndData=contextScriptPathAndData,
                                                                          extraVolatileDiskGB=vdisksizeGB,
                                                                          projectId=projectId)
        scriptExitCode, scriptStdoutLines, scriptStderrLines = scriptResults

        hostIP = nodeDetails.ipv4s[0]

        for line in scriptStdoutLines:
            LOG("[%s] #STDOUT# %s" % (hostIP, line))
        for line in scriptStderrLines:
            LOG("[%s] #STDERR# %s" % (hostIP, line))

        print nodeDetails.id, hostIP, scriptExitCode, nodeDetails.adminPass


if __name__ == "__main__":
    # noinspection PyBroadException
    try:
        command = MainProgram()
        command.doWork()
    except KeyboardInterrupt:
        print '\n\nExecution interrupted by the user... goodbye!'
    except:
        import traceback

        LOG("#EXCEPTION# %s" % traceback.format_exc())
        exit(1)
